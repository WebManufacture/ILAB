<!DOCTYPE HTML>
<html>
<head>
	<title>ILAB client</title>
	<link href="../client/System.default.css" rel="stylesheet">
	<link type='text/css' rel='stylesheet' href="http://Services.web-manufacture.net/Styles/System.default.css"/>
	<script type="text/javascript" src="http://services.web-manufacture.net/Base/v1.5?join=true"></script>

	<script src="../client/domjs_v1.5.js" type="text/javascript"></script>
	<script src="../client/WebSocketProxy.js" type="text/javascript"></script>

	<meta content="text/html; charset=utf-8" http-equiv="Content-Type">
	<style type="text/css">
		body{
			font-size: 24px;
			background: black;
			color: white;
		}

	</style><script type="text/javascript">

        function Connect (url, serviceId) {
            ServicesManager = new ServiceProxy("ServicesManager");
            return ServicesManager.attach(url + "/" + serviceId).then(function () {
                ServicesManager.connected = true;
                ServicesManager.on("external-result", function(event, message){
                    console.log(message.result);
                });
                ServicesManager.on("external-error", function(event, message){
                    console.error(message.result);
                });
                console.log(ServicesManager);
                return ServicesManager;
            });
        };

        Connect("ws://localhost:5700", "ServicesManager");

        Monitor = {

        };

        function log(text) {
            if (!Monitor.log){ Monitor.log = document.getElementById("logsMonitor");};
            if (!Monitor.logProto){Monitor.logProto = document.querySelector(".log-item.log.prototype")};
            var div = document.createElement("div");
            div.className = "log-item log";
            div.innerHTML = Monitor.logProto.innerHTML;
            div.querySelector(".datetime").textContent = (new Date()).toLocaleTimeString();
            div.querySelector(".text").innerHTML = text;
            Monitor.log.appendChild(div);
        }

        Monitor.Start = function(){
            var socket  = new WebSocket("ws://localhost:5700/ServicesManager/");

            socket.onopen = function() {
                log("Соединение установлено.");
            };

            socket.onclose = function(event) {
                if (event.wasClean) {
                    log('Соединение закрыто чисто');
                } else {
                    log('Обрыв соединения'); // например, "убит" процесс сервера
                }
                log('Код: ' + event.code + ' причина: ' + event.reason);
            };

            socket.onmessage = function(event) {
                log("Получены данные:")
                log("" + event.data);
            };

            socket.onerror = function(error) {
                log("Ошибка " + error.message);
            };
        }

	</script>


	<style>

		body{
			padding-top: 100px;
			color: #9DA;
			background-color: #202020;
		}

		body.loading .header.toolbar .menuitem.server-control {
			display: none;
		}

		body.online .toolbar{
			background-color: #CFA;
		}

		#logsMonitor {
			display: block;
			font-size: 12px;
			padding: 2px;
			text-align: left;
			font-family: monospace;
			width:80%;
			padding-bottom: 140px;
		}

		#logsMonitor .log-item{
			padding-left: 50px;
			width: 100%;
			white-space: pre;
		}

		#logsMonitor .log-item.old:first-child{
			margin-top: 10px;
		}

		#logsMonitor .log-item.old{
			opacity: 0.5;
		}

		#logsMonitor .log-item.old:hover{
			opacity: 1;
		}

		#logsMonitor .log-item .datetime{
			color: #777;
			margin-left: -50px;
		}

		#logsMonitor .log-item.error .datetime{
			color: red;
		}


		#logsMonitor .log-item .text{

		}

		.stack-line{
			float: none;
			clear:both;
		}

		.stack-line .stack-part{
			display: inline-block;
			padding-left: 5px;
		}

		.stack-line .stack-part.function{
			color: green;
		}

		.stack-line .stack-part.module-name{
			color: gray;
		}

		.stack-line .stack-part.line{
			color: navy;
			font-weight: bold;
		}

		.header.toolbar .menuitem.server-control:active{
			border:  1px solid black;
		}

		.header.toolbar #urlBar {
			border: 1px solid silver;
			border-radius: 5px;
			display: inline-block;
			width: 500px;
		}

		#cmdBlock{
			position: fixed;
			bottom: 0;
			width: 100%;
			box-sizing: border-box;
			padding: 10px 20px;
			background-color: rgba(126,122,122,0.5);
		}

		#cmdText {
			width: 100%;
			font-family: Monospace;
			font-size: 12px;
		}

	</style>

</head>
<body>

<include url='http://services.web-manufacture.net/UI/toolbars.htm'></include>
<div class='toolbar vertical right-side'>
	<div class='menuitem server-control start-btn' id='serverStart' onclick="Monitor.Start();">
		СТАРТ
	</div>
	<div class='menuitem server-control stop-btn' id='serverStop' onclick="Monitor.Stop();">
		СТОП
	</div>
	<div class='menuitem server-control reload-btn' id='serverRestart' onclick="Monitor.Reset();">
		РЕСТАРТ
	</div>

	<div class="menuitem server-control url-go invisible" onclick="Monitor.GoUrl(DOM('#urlBar').innerHTML);">GO!</div>
	<div id="urlBar" class="invisible" contenteditable="true" ></div>
</div>
<div  id='logsMonitor'>
	<div class='log-item info prototype'>
		<span class='datetime'></span>
		<span class='text'></span>
	</div>
	<div class='log-item debug prototype'>
		<span class='datetime'></span>
		<span class='text'></span>
	</div>
	<div class='log-item warn prototype'>
		<span class='datetime'></span>
		<span class='text'></span>
	</div>
	<div class='log-item error prototype'>
		<span class='datetime'></span>
		<span class='text'></span>
	</div>
	<div class='log-item log prototype'>
		<span class='datetime'></span>
		<span class='text'></span>
	</div>
</div>
<div id='cmdBlock'>
	<textarea id='cmdText' type='text'></textarea>
</div>
</body>

</html>
</html>
