<include url="%UI%/win.htm"></include>

<win class="log_window" title="Лог системы">
	<div class="subbar filter-bar"></div> 
	<div class="window_content"></div>
</win>

<div class="module-button Log-button" onclick="Logging.Win.ShowWindow();"></div>

<script type="text/javascript" id="logging">
	Logging = M.GetModuleEndsUrl("log.htm");
	
	Logging.Init = function(){
		//W.Body.adg(".Log-button");
		window.addEventListener("keypress", Logging.KeyHook, false);
		//      Logging.Win = Logging.get(".log_window");
	};
	
	Logging.Add = function(){
		if (Logging.initialized && arguments.length > 0 && arguments[0] instanceof HTMLElement){
			Logging.InitItem(arguments[0]);
		}
		Logging._add.apply(this, arguments); 
	};
	
	Logging.startDate = null;
	Logging.incDate = null;
	
	Logging.InitItem = function(item){
		var filterBar = Logging.filterBar;
		var filters = Logging.filters;
		var tags = Logging.tags;
		var module = item.attr("module-id");
		var filter = filters.get("." + module);
		if (module && !filter){
			var filter = filters.div(".filter", module);
			filter.cls(module);
			filter.attr("filter", "." + module);
			filter.onclick = Logging.filterClick;		
		};	
		if (filter){
			var itemType = item.attr("itemType");	    
			if (itemType && filter.get("." + itemType) == null){
				var inner = filter.get(".inner");
				if (!inner){
					inner = filter.div(".inner");
				}	
				var tag = inner.div(".tag", "." + itemType);
				tag.cls(itemType);
				tag.onclick = Logging.tagClick;
			}
		}
		var itemType = item.attr("itemType");
		if (itemType && tags.get("." + itemType) == null){
			var tag = tags.div(".tag", "." + itemType);
			tag.cls(itemType);
			tag.onclick = Logging.tagClick;
		}
		var elems = DOM.div(".inner-elems");
		for (var i = item.childNodes.length - 1; i >= 0 ; i--){
			if (item.childNodes[i].nodeType == 1){
				elems.add(item.childNodes[i]);
			}
		}
		var text = item.innerHTML + " ";
		text = text.replace(/http:/ig, "http");
		text = text.replace(/@url='([^']+)'/ig, "@url=<a class='url attrib' href='$1'>$1</a>");
		text = text.replace(/\&lt;([^\&]+)\&gt;/ig, ":<div class='html-element inline-text'>$1</div>:");
		text = text.replace(/\shttp\/\/([^\s]+)\s/ig, ": <a class='url plain' href='http//$1'>http//$1</a> :");
		item.div(".date.date-abs.inline-text", item.attr("date"));
		item.innerHTML = "";
		text = text.split(":");
		var val = item.attr("date-val");
		if (val){
			val = parseInt(val);
			if (!Logging.incDate){
				Logging.incDate = val;
			}
			if (!Logging.startDate)
			{
				Logging.startDate = val;
			}
			item.div(".date.date-val.inline-text", (val - Logging.startDate));
			item.div(".date.date-inc.inline-text", "+" + (val - Logging.incDate));
			Logging.incDate = val;
		}
		var mod = item.div(".module-name.inline-text", module);
		mod.attr('tooltip', item.attr('module-url'));
		if (text.length > 1){
			item.div('.operation.inline-text', text[1]);
			for (var t = 2; t <text.length; t++){
				item.innerHTML += text[t];
			}
		}
		else{
			item.innerHTML += text[0];
		} 
		for (var i = 0; i < elems.childNodes.length; i++){
			item.add(elems.childNodes[i]);	
		}
		var ahrefs = item.all("a");
		for (var t = 0; t < ahrefs.length; t++){
			ahrefs[t].onclick = Logging.HrefClick;
			var a = ahrefs[t].innerHTML;
			var ind = a.lastIndexOf("/");
			if (ind >= 0){
				a = a.substring(0, ind) + "<span class='file'>" + a.substring(ind) + "</span>";
				ahrefs[t].html(a);
			}
		}
	};
	
	Logging.InitWindow = function(window){    
		win = Logging.Win = window;
		win.ondblclick = Logging.CloseWindow;
		var filterBar = Logging.filterBar = win.get(".filter-bar");
		var filters = Logging.filters = filterBar.div(".filters");
		filterBar.div('.clear');
		var tags = Logging.tags = filterBar.div(".tags");
		filterBar.div('.clear');
		
		Logging.Log = win.get('.window_content').add(L);
		Logging.Log.rcs("invisible");
		Logging._add = Logging.Log._add;
		Logging.Log.Add = Logging.Log.add = Logging.Log._add = Logging.Log._Add = Logging.Add; 
		
		
		var modfilter = filters.div(".filter", "Clear");
		modfilter.onclick = Logging.filterClick;
		
		modfilter = filters.div(".filter", "Dates");
		modfilter.onclick = function(){
			if (Logging.Log.is(".with-date")){
				Logging.Log.del(".with-date");
			}
			else{
				Logging.Log.add(".with-date");
			};
		};
		
		modfilter = filters.div(".filter.info", "Info");
		modfilter.filter = modfilter.attr("filter",".info");
		modfilter.onclick = Logging.filterClick;
		
		modfilter = filters.div(".filter.warn", "Warn");
		modfilter.filter = modfilter.attr("filter",".warn");
		modfilter.onclick = Logging.filterClick;
		
		modfilter = filters.div(".filter.error", "Error");
		modfilter.filter = modfilter.attr("filter",".Error");
		modfilter.onclick = Logging.filterClick;
		
		var modules = [];
		var itemTypes = [];
		var items = L.all(".item"); 
		for (var i = 0; i < items.length; i++)
		{
			var item = items[i];
			try{
				Logging.InitItem(item);
			}
			catch(e){
				Logging.Log.div(".log-error", item.textContent + "<br/>" + e.message + e.stack);
			}
		}  
		
		Logging.initialized = true;
	};
	
	Logging.KeyHook = function(event){
		if (event.ctrlKey && event.charCode == 108){
			Logging.Win.show();
			event.stopPropagation();
			event.preventDefault();
			return false;
		} 
	};
	
	Logging.tagClick = function(event) {
		var tag = this.innerHTML;
		Logging.Log.rcs("filtered");
		Logging.Log.all(".item").rcs("highlight");
		if (event.ctrlKey) {
			Logging.Log.cls("filtered");
			Logging.Log.all(".item").hide();
			Logging.Log.all(".item" + tag).show();
			Logging.Log.get(".item" + tag).focus();
			event.stopPropagation();
			return false;
		}
		//Logging.Win.all(".item").show();
		Logging.Log.all(".item" + tag).cls("highlight");
	};
	
	Logging.filterClick = function(event){
		var tag = this.attr("filter");
		if (tag){
			Logging.Log.cls("filtered");
			Logging.Log.all(".item").hide();  
			Logging.Log.all(".item" + tag).show();  	  
		}
		else{
			Logging.Log.rcs("filtered");
			Logging.Log.all(".item").show();  
		}
		event.stopPropagation();
		return false;
	};
	
	Logging.HrefClick = function(event){
		try{
			debugger;
			var href = this.attr('href');
			Logging.Log.rcs("filtered");
			Logging.Log.all(".item").rcs("highlite");
			var ahrefs = Logging.Log.all("a[href='" + href + "']");
			if (event.ctrlKey) {
				Logging.Log.cls("filtered");
				Logging.Log.all(".item").hide();
			}
			for (var t = 0; t < ahrefs.length; t++){
				var a = ahrefs[t];
				var item = a.get("^.item");
				if (item){
					if(event.ctrlKey){
						item.show();
					}
					else{
						item.cls('highlight');   
					}
				}
			}
		}
		catch (e){
			console.error(e);
			
		}
		return false;
	}
</script>

<style>
	
	.clear{
		clear: both;	
	}
	
	win.nowindows{
		position: fixed;
		top : 20%;
		left : 20%;
		width: 60%;
		height: 60%;
		border: solid 1px gray;
		padding-top: 20px;
		background-color: #EEE;
	}
	
	win.nowindows .subbar{
		position: absolute;
		height: 20px;
		top: 0;
		left: 0;
	}
	
	.Log-button1{
		width: 48px;
		height: 48px;
		position : fixed;
		right : 0;
		top: 0;
		opacity: 0.2;
		z-index: 100;
		background-image: url("http://system.web-manufacture.net/Images/guake.png");  
	}
	
	.module-button.Log-button{
		background-image: url("http://system.web-manufacture.net/Images/guake.png");  
	}
	
	.Log-button:hover
	{    
		opacity: 1;  
	}
	
	
	.window.log_window
	{
		height: 500px;
		background-color: white;
		font-family: monospace;
	}
	
	.window.log_window .window_content
	{   
		height: 80%;
		font-family: courier;
		background-color: #EEE;
	}
	
	.log_window .tag
	{
		color: #33AA88;
		display: block;
		float: left;
		padding-left: 10px;
		padding-top: 5px;
		padding-bottom: 5px;
		padding-right:10px;
		font-size: 11px;
		cursor: pointer;
	}
	
	.log_window  .filter{
		color: #BB3300;
		display: block;
		float: left;
		padding-left: 10px;
		padding-top: 5px;
		padding-bottom: 5px;
		padding-right:10px;
		font-size: 11px;
		cursor: pointer;
		position: relative;
	}
	
	.log_window .filter .inner
	{
		display: none; 	
		position: absolute;
		top: 25px;
		left: 10px;
		width: 150px;
		padding: 0 10px;
		background-color: #eee;	
		border: solid 1px black;
	}	
	
	.log_window .filter:hover
	{
		color: #BB9900;
		position: relative;
	}
	
	.log_window .filter:hover .inner
	{
		display: block; 	
	}
	
	.log_window .log
	{   
		overflow-y: scroll;
		height: 100%;
		
	}
	
	
	.log_window .log .item
	{
		border: solid 1px #DDD; 
		overflow: hidden;
	}
	
	.log_window .log .item>.date
	{
		display: none;
	}
	
	.log_window .log.with-date .item>.date
	{
		display: inline;
	}
	
	.log_window .log .item a .file{
		color: red;
	}
	
	.log_window .log .item .module-name
	{
		width: 40px;
		overflow: hidden;
		color: gray;
		display:inline-block;
	}
	
	.log_window .log .item:hover .module-name
	{
		color: red;
	}
	
	.log_window .log .operation
	{
		padding: 0 3px 0 15px;
		font-weight: bold;
		width: 80px;
		overflow: hidden;
		display:inline-block;
	}
	
	.log_window .log .item .html-element{
		color: green;
	}
	
	.log_window .log .item .url{
		color:gray;
		text-decoration: none;
	}
	
	.log_window .inline-text
	{
		display: inline;
		padding: 0 5px;
	}
	
	.log_window .log.filtered .item
	{
		
	}
	
	.log_window .log .item.highlight
	{
		background-color: #EFC;
	}
	
	.log_window .log .item:hover
	{
		background-color: #DDD;
		overflow: visible;
	}
	
	
	.log_window .log .item.err
	{
		color: red; 
	}
	
	.log_window .log .item.warn
	{
		color: #D50; 
	}
	
	.log_window .log.filtered .item.modules.loading{
		background-image: url("http://system.web-manufacture.net/1rightarrow.png");
		background-repeat: no-repeat;
		background-position: left center;
		padding-left: 20px;
		color: #5B0;
	}
	
	.log_window .log.filtered .item.modules.registered{
		color: #D30;
	}
</style>