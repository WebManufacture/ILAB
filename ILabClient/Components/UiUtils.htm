<script type='text/javascript'>
	DOM.formatJSON = function(obj, withBR){
		if (typeof obj == "string"){
			obj = JSON.parse(obj);	
		}
		return uutils._formatObj(obj, true, withBR);
	};
	
	uutils = {};
	
	uutils._formatObj = function(obj, recursive, withBR){
		var newLine = withBR ? ".with-br" : "";
		var elem = DOM.div(".js-entity" + newLine);
		elem.editingObj = obj;
		elem.add("." + typeof (obj));
		if (typeof (obj) == "number"){
			elem.add(".js-property-value");	
		}
		if (typeof (obj) == 'object'){
			if (obj instanceof Array){
				elem.add(".array");
				elem.innerHTML = "<div class='js-syntax array-start'>[</div>";
				if (withBR && obj.length > 0 && typeof(obj[0]) == 'object'){
					elem.innerHTML += "<br/>";	
				}
				for (var i = 0; i < obj.length; i++){
					elem.add(uutils._formatObj(obj[i], recursive, withBR));
					if (i < obj.length-1) elem.innerHTML += "<div class='js-syntax array-separator'>,</div>";
				}
				if (withBR && obj.length > 0 && typeof(obj[0]) == 'object'){
					elem.innerHTML += "<br/>";	
				}
				elem.innerHTML += "<div class='js-syntax array-finish'>]</div>";			
				return elem;
			}
			elem.innerHTML = "<div class='js-syntax object-start'>{</div>";
			/*if (withBR){
					elem.innerHTML += "<br/>";
}*/
			var objs = false;
			for (var name in obj){
				objs = true;
				if (withBR){
					elem.innerHTML += "<br/>";
				}
				var prop = elem.div(".object-line");
				prop.propertyKey = name;
				prop.add("@name", name);
				prop.div(".object-key", name/*"&quot;" + name + "&quot;"*/);
				prop.div(".js-syntax.name-value-separator",':');
				prop.add(uutils._formatObj(obj[name], recursive, withBR));
				elem.div(".js-syntax.obj-property-separator",',');
			}
			if (withBR && objs) elem.innerHTML += "<br/>";
			elem.innerHTML += "<div class='js-syntax object-finish'>}</div>";
			return elem;
		}
		if (typeof (obj) == 'function'){
		    var text = (obj + "").substr(0, 60) + "... }";
			elem.div(".js-entity.js-function.js-property-value").textContent = text;
			return elem;
		}
		if (typeof (obj) == 'string'){
			elem.innerHTML = "<div class='js-syntax quote-start'>&quot;</div>";
			elem.div(".js-entity.js-string.js-property-value").textContent = obj;
			elem.innerHTML += "<div class='js-syntax  quote-finish'>&quot;</div>";
			return elem;
		}
		elem.textContent = obj + "";
		return elem;
	};
	
</script>

<style type='text/css'>
	
	.js-entity div{
		display: inline-block;
		vertical-align: top;
		font-family: monospace;
	}
	
	
	.js-entity.object:not(.with-br){
		padding-left: 5px;
		padding-right: 5px;
	}
	
	
	.js-entity.object:not(.with-br) .js-entity{
		padding-left: 3px;
		padding-right: 3px;
	}
	
	.js-entity.object:not(.with-br) .object-line{
		padding-left: 5px;
		padding-right: 5px;
	}
	
	.js-entity.object{
		color : #A4F;	
		background-color: rgba(150, 200, 170, 0.07)
	}
	
	.js-entity.number{
		color : navy;
	}
	
	.js-entity.object.array{
		color : red;
		/*background-color: rgba(150, 150, 200, 0.1)*/
	}
	
	
	.js-entity.object.with-br .js-entity.object.array>.js-entity.object{
		margin-left: 10px;
		margin-right: 10px;
	}
	
	.js-entity.string{
		color : #f85;
	}
	
	
	.js-entity.string .js-string{
		padding: 0!important;
	}
	
	.js-entity .js-syntax{
		font-weight: bold;	
	}
	
	.object.with-br .object-line{
		padding-left: 20px;
		/*border-left: solid 1px #ccc;*/
	}
	
	.object.with-br .js-entity>.object-line{
		padding-left: 20px;
		/*border-left: solid 1px #ccc;*/
	}
	
	.js-entity>.object-line>.object-key{
		color: green;
		min-width: 30px;
	}
</style>